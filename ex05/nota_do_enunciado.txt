üéØ Breve objetivo do enunciado:
    O exerc√≠cio prop√µe escrever uma fun√ß√£o que exiba os caracteres de uma string no ecr√£, utilizando apenas a fun√ß√£o write. O objetivo √© treinar: 
    - Percurso de strings em C (char *str)
    - Uso de ponteiros e √≠ndices
    - Escrita direta no terminal via write
    - Evitar uso de fun√ß√µes de alto n√≠vel como printf

‚úÖ Pontos positivos:
    - Foco em baixo n√≠vel: obriga o uso direto de write, √∫til para entender como funciona a sa√≠da padr√£o.
    - Treina manipula√ß√£o de strings: percorre caractere por caractere.
    - Simples e did√°tico: ideal para consolidar fundamentos de ponteiros e arrays.
    - Sem depend√™ncias externas: n√£o exige bibliotecas al√©m de unistd.h.

‚ö†Ô∏è Pontos negativos:
    - Sem verifica√ß√£o de ponteiro nulo: se str == NULL, pode causar falha.
    - N√£o permite formata√ß√£o: diferente de printf, n√£o h√° controle de layout ou tipos.
    - Pouco flex√≠vel: s√≥ imprime strings, sem retorno ou controle de erro.

üõ†Ô∏è Quando usar esse mecanismo em projetos:
    - Sistemas embarcados ou ambientes restritos: onde printf n√£o est√° dispon√≠vel.
    - Fun√ß√µes utilit√°rias internas: como ft_putstr para debug ou logs simples.
    - Implementa√ß√µes personalizadas de libc: como em projetos da 42 ou sistemas operacionais.
    - Ambientes com controle direto de descritores: como sockets, pipes ou arquivos.

üß™ 4 Enunciados para praticar e aprofundar:
    - 1. ft_putnbr
    Escreva uma fun√ß√£o que receba um inteiro e o exiba no ecr√£ usando apenas write.
    void ft_putnbr(int n);
    
    - 2. ft_putstr_fd
    Escreva uma fun√ß√£o que receba uma string e um descritor de ficheiro, e escreva a string nesse descritor.
    void ft_putstr_fd(char *str, int fd);
    
    - 3. ft_putendl
    Escreva uma fun√ß√£o que exiba uma string seguida de uma quebra de linha (\n), usando apenas write.
    void ft_putendl(char *str);
    
    - 4. ft_putstr_safe
    Escreva uma fun√ß√£o que exiba uma string apenas se o ponteiro n√£o for nulo, evitando falhas.
    void ft_putstr_safe(char *str);