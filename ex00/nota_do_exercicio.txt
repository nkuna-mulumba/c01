üéØ Breve objetivo do enunciado
    O exerc√≠cio tem como objetivo:
    - Introduzir o conceito de ponteiros em C.
    - Mostrar como uma fun√ß√£o pode modificar diretamente 
        uma vari√°vel fora do seu escopo.
    - Refor√ßar a ideia de acesso indireto √† mem√≥ria.
    - Estimular o entendimento de refer√™ncia vs. valor.

‚úÖ Pontos positivos
    - Did√°tico e direto: ensina ponteiros sem distra√ß√µes.
    - F√°cil de testar: basta declarar um int, passar seu 
        endere√ßo e verificar se virou 42.
    - Fundamental para C: ponteiros s√£o a espinha dorsal da linguagem.
    - Abre portas para conceitos maiores: como arrays, structs, 
        manipula√ß√£o din√¢mica de mem√≥ria.

‚ö†Ô∏è Pontos negativos
    - Muito simples: pode parecer trivial demais para quem
        j√° tem alguma base.
    - Pouco contexto pr√°tico: n√£o mostra ainda por que isso
        seria √∫til num projeto real.
    - N√£o trata erros ou valida√ß√µes: por exemplo, se o ponteiro for NULL.
    
üõ†Ô∏è Quando pode ser necess√°rio ou √∫til?
    - Esse tipo de fun√ß√£o √© √∫til em v√°rias situa√ß√µes:
    - Alterar valores em fun√ß√µes sem retorno: como atualizar uma vari√°vel de status.
    - Manipular estruturas complexas: como listas ligadas, √°rvores, etc.
    - Passar dados entre fun√ß√µes sem c√≥pia: economiza mem√≥ria e tempo.
    - Simular m√∫ltiplos retornos: j√° que C n√£o permite retornar mais de um valor diretamente.

üß™ 5 enunciados para melhorar a pr√°tica e entendimento
    - Modifique o valor de dois inteiros usando dois ponteiros.
        void ft_swap_to_42_and_24(int *a, int *b);
    - Crie uma fun√ß√£o que troque os valores de dois inteiros.
        void ft_swap(int *a, int *b);
    - Crie uma fun√ß√£o que incremente o valor apontado por um ponteiro.
        void ft_increment(int *nbr);
    - Crie uma fun√ß√£o que zere o valor de um inteiro usando ponteiro.
        void ft_reset(int *nbr);
    - Crie uma fun√ß√£o que multiplique o valor apontado por 
        um ponteiro por um fator.
        void ft_multiply(int *nbr, int factor);