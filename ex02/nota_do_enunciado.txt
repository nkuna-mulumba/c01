üéØ Breve objetivo do enunciado
    Criar uma fun√ß√£o que troca o conte√∫do de dois inteiros usando ponteiros. O foco √© ensinar:
    - Manipula√ß√£o de ponteiros
    - Passagem por refer√™ncia
    - Uso de vari√°veis tempor√°rias
    - Altera√ß√£o direta de valores fora da fun√ß√£o

‚úÖ Pontos positivos
    - Did√°tico: ensina conceitos fundamentais de C, como ponteiros e mem√≥ria.
    - Modular: encapsula a l√≥gica de troca em uma fun√ß√£o reutiliz√°vel.
    - Seguro: evita perda de dados com uso de vari√°vel tempor√°ria.
    - Clareza: f√°cil de entender e aplicar em diversos contextos.
    - Reutiliz√°vel: pode ser usada em ordena√ß√µes, algoritmos, manipula√ß√£o de estruturas, etc.

‚ö†Ô∏è Pontos negativos
    - Limitado a int: n√£o funciona com outros tipos sem duplicar c√≥digo.
    - N√£o verifica ponteiros nulos: pode causar erro se a ou b forem NULL.
    - N√£o √© gen√©rica: n√£o serve para tipos compostos ou gen√©ricos sem adapta√ß√£o.
    - Pouco flex√≠vel: n√£o retorna status ou erro, o que pode ser √∫til em projetos maiores.
    - N√£o documenta comportamento esperado em casos extremos (ex: ponteiros iguais)

üõ†Ô∏è Quando usar esse tipo de pr√°tica
    - Em algoritmos de ordena√ß√£o (ex: bubble sort, selection sort)
    - Em manipula√ß√£o de estruturas (ex: trocar campos entre structs)
    - Em fun√ß√µes que precisam reorganizar dados sem criar novas vari√°veis
    - Em projetos que exigem otimiza√ß√£o de mem√≥ria e desempenho
    - Em testes e simula√ß√µes onde valores precisam ser trocados dinamicamente

Enunciados como boas pr√°ticas para esse tipo de mecanismo
    - Crie uma fun√ß√£o que permita trocar o conte√∫do de duas vari√°veis de qualquer tipo, utilizando ponteiros gen√©ricos e a fun√ß√£o memcpy.
        void swap_generic(void *a, void *b, size_t size);
    
    - Implemente uma fun√ß√£o que s√≥ realiza a troca de valores se os ponteiros fornecidos forem v√°lidos (n√£o nulos).
        int safe_swap(void *a, void *b, size_t size);
    
    - Desenvolva uma fun√ß√£o que troca dois elementos de um array gen√©rico, dado o √≠ndice de cada elemento e o tamanho de cada item.
    void swap_array_elements(void *array, size_t elem_size, size_t index1, size_t index2);
    
    
    - Crie uma fun√ß√£o que troca dois campos de uma mesma struct, usando ponteiros para os campos e o tamanho de cada campo.
    void swap_struct_fields(void *field1, void *field2, size_t size);
    
    - Implemente uma fun√ß√£o que s√≥ realiza a troca de valores se os dados forem diferentes, evitando opera√ß√µes desnecess√°rias.
        int conditional_swap(void *a, void *b, size_t size);