üéØ Objetivo do Enunciado
    O exerc√≠cio tem como principal objetivo ensinar o conceito de ponteiros 
    m√∫ltiplos e como navegar por diferentes n√≠veis de indire√ß√£o. Ao trabalhar com 
    int *********nbr, o aluno √© for√ßado a entender:
    O que √© um ponteiro para ponteiro
    Como desreferenciar m√∫ltiplos n√≠veis
    Como funciona a mem√≥ria e o acesso indireto a vari√°veis

‚úÖ Pontos Positivos:
    - Fortalece a compreens√£o de ponteiros: Ajuda a consolidar a ideia de que ponteiros s√£o apenas endere√ßos, e que podem apontar para outros ponteiros.
    - Exercita a paci√™ncia e aten√ß√£o: Desreferenciar 9 n√≠veis exige foco e cuidado.
    - Introduz o conceito de indire√ß√£o profunda: √ötil para entender estruturas complexas como listas encadeadas, √°rvores, ou manipula√ß√£o de ponteiros em fun√ß√µes.
    - Ajuda a visualizar a mem√≥ria: Estimula o aluno a imaginar como os dados est√£o organizados na RAM.

‚ùå Pontos Negativos:
    - Pouco pr√°tico no mundo real: √â extremamente raro (quase nunca) usar 9 n√≠veis de ponteiros em aplica√ß√µes reais.
    - Pode confundir iniciantes: Sem contexto, parece um exerc√≠cio arbitr√°rio e desnecessariamente complexo.
    - N√£o ensina boas pr√°ticas diretamente: Pode induzir √† ideia errada de que profundidade de ponteiros √© desej√°vel.

üõ†Ô∏è Quando usar esse tipo de mecanismo:
    -Na pr√°tica, m√∫ltiplos n√≠veis de ponteiros s√£o usados em casos como:
    -Manipula√ß√£o de ponteiros em fun√ß√µes: Ex: passar int ** para modificar um ponteiro dentro de uma fun√ß√£o.
    -Aloca√ß√£o din√¢mica de matrizes ou estruturas complexas
    -Implementa√ß√£o de estruturas como √°rvores, grafos, ou listas encadeadas
    -APIs que precisam modificar vari√°veis externas via ponteiros
    -Mas 9 n√≠veis √© exagerado ‚Äî normalmente usamos at√© 2 ou 3 n√≠veis no m√°ximo.

üìò 5 Enunciados para boas pr√°ticas e entendimento:
    Aqui v√£o 5 ideias de exerc√≠cios que ensinam o uso de ponteiros de forma mais pr√°tica e progressiva:
    - Modifique uma vari√°vel via ponteiro simples:
        void ft_set_to_42(int *nbr);
    - Modifique um ponteiro via ponteiro para ponteiro:
        void ft_change_pointer(int **nbr);
    - Alocar mem√≥ria dinamicamente e preencher valores:
        void ft_allocate_and_fill(int **array, int size);
    - Manipular strings via ponteiros:
        void ft_str_uppercase(char *str);
    - Criar uma fun√ß√£o que troca dois valores usando ponteiros
        void ft_swap(int *a, int *b);