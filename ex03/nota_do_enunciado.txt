‚úÖ Pontos positivos:
    - Evita repeti√ß√£o de c√≥digo: encapsula duas opera√ß√µes matem√°ticas comuns em uma √∫nica fun√ß√£o.
    - Uso de ponteiros: permite retornar m√∫ltiplos valores, o que n√£o √© poss√≠vel diretamente em C.
    - Clareza sem√¢ntica: o nome da fun√ß√£o j√° indica exatamente o que ela faz.
    - Efici√™ncia: realiza ambas as opera√ß√µes com apenas uma chamada de fun√ß√£o.
    - Versatilidade: pode ser usada em algoritmos que exigem tanto o quociente quanto o resto (ex: convers√£o de base, criptografia, ordena√ß√£o por buckets).

‚ùå Pontos negativos:
    - N√£o trata divis√£o por zero: se b == 0, a fun√ß√£o causar√° erro de execu√ß√£o.
    - N√£o retorna status: n√£o h√° verifica√ß√£o de erro ou retorno para indicar falha.
    - Depend√™ncia de ponteiros v√°lidos: se div ou mod forem NULL, pode causar comportamento indefinido.
    - Pouco flex√≠vel para tipos diferentes: funciona apenas com int; n√£o lida com float, double, etc.
    - N√£o √© segura em ambientes cr√≠ticos sem valida√ß√£o.

üõ†Ô∏è Quando usar esse tipo de mecanismo:
    - Em algoritmos que precisam de quociente e resto simultaneamente, como:
    - Convers√£o de n√∫meros para outras bases (bin√°rio, hexadecimal).
    - Algoritmos de hashing.
    - Distribui√ß√£o de tarefas ou dados em blocos.
    - C√°lculo de tempo (ex: converter segundos em horas/minutos).
    - Criptografia modular.

üß™ 5 enunciados pr√°ticos para treinar o uso da fun√ß√£o:
    - Escreva uma fun√ß√£o que converta segundos em minutos e segundos usando ft_div_mod.
    - Implemente uma fun√ß√£o que distribua n itens igualmente entre k grupos e retorne o n√∫mero de itens por grupo e os que sobram.
    - Crie um programa que receba um n√∫mero e diga se ele √© divis√≠vel por outro, usando o m√≥dulo calculado por ft_div_mod.
    - Utilize ft_div_mod para simular um rel√≥gio digital que converte segundos em horas, minutos e segundos.
    - Implemente uma fun√ß√£o que, dado um n√∫mero, retorne os d√≠gitos separados usando divis√£o e m√≥dulo.